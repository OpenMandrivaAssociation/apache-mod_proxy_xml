<IfDefine HAVE_PROXY_XML>
    <IfModule !mod_proxy_xml.c>
	LoadModule proxy_xml_module	extramodules/mod_proxy_xml.so
    </IfModule>
</IfDefine>

<IfModule mod_proxy_xml.c>

    # ProxyXMLURLMap  from-pattern    to-pattern
    # 
    #    This  causes  from-pattern  to  be rewritten to to-pattern whenever it
    #    appears in links. Matching is starts-with.
    # 
    # Other Configuration
    # 
    #    mod_proxy_xml  handlers  have to be registered as namespace providers.
    #    To process links in XHTML and WML, use
    # XMLNSUseNamespace http://www.w3.org/1999/xhtml on proxy
    # XMLNSUseNamespace http://www.wapforum.org/2001/wml on proxy
    # 
    #    with mod_xmlns, or
    # MLUseNamespace http://www.w3.org/1999/xhtml on proxy
    # MLUseNamespace http://www.wapforum.org/2001/wml on proxy
    # 
    #    with mod_publisher.
    # 
    #    If you are dealing with a default namespace that isn't declared in the
    #    markup, you will also need a default namespace
    #    . For example, to parse WML without the namespace attribute:
    # XMLNSUseNamespace http://www.wapforum.org/2001/wml on proxy
    # XMLNSDefaultNamespace http://www.wapforum.org/2001/wml
    # 
    #    These  can  be  used with SetOutputFilter xmlns. However, it is better
    #    controlled  with  mod_filter.  So  for example you can use it together
    #    with  mod_proxy_html  to  filter different markup types. The following
    #    will  filter  text/html  through  mod_proxy_html,  and (with the above
    #    XMLNSUseNamespace  directives)  will  filter  WML  and  XHTML  through
    #    mod_proxy_xml:
    # FilterDeclare url-fix Content-Type
    # FilterProvider url-fix proxy-html $text/html
    # FilterProvider url-fix xmlns $text/vnd.wap.wml
    # FilterProvider url-fix xmlns $application/xhtml+xml
    # FilterChain url-fix
    # FilterProtocol url-fix "change=yes byteranges=no"

</IfModule>
